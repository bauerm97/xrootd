##########################################
# hostname where the redirector should run
# takes the execution host by default,
# just change it to the name you get on the host by executing 'hostname -f'
# this string has to be the same in all the machines of the cluster
#########################################
export MANAGERHOST='<%= node["t2"]["redirector-hostname"] %>'

# if you run redirector and server on the same machine, set this line properly
export SERVERONREDIRECTOR="<%= node["t2"]["SERVERONREDIRECTOR"] %>"

#########################################
# hostname where MonALISA server listens for monitoring data (usually the vobox)
# comment to disable xrootd & olbd monitoring
#########################################



# run without debug
#export XRDDEBUG=""
# run with debug... remember to switch it off in production!!!
export XRDDEBUG="<%= node["xrootd"]["XRDDEBUG"] %>"
#export XRDDEBUG="-d"


#########################################
# user that runs the daemons
# If somebody else (e.g. root) runs the script then the scripts will "su" to this user
# This has to be filled correctly in any case
#
export XRDUSER="<%= node["users"]["storage-user"] %>"
export XRDMAXFD=<%= node["xrootd"]["XRDMAXFD"] %>
#export XRDMAXFD=65000

########################################
# base directory for core log & admin directory
# an empty definition puts it into PREFIX/logs | core | admin
export XRDBASEDIR="<%= node["xrootd"]["XRDBASEDIR"] %>"
#export XRDBASEDIR="/var/log/xrootd"

#########################################
# define if you run as:
#  --- overlay to DPM
#export SYSTEM=DPM
# define the DPM/DPNS_HOST name
#export DPM_HOST=...
#export DPNS_HOST=...
# this is needed to be able to connect with the root identity
#export CSEC_MECH=ID

# or

# ---- plain xrootd
export SYSTEM=XROOTD

##########################################
# -if redirector and server are the same machine,
#   the ports for xrd and cmsd have to be different
# -otherwise the default port numbers are used
#########################################
export XRDSERVERPORT=1094
export XRDMANAGERPORT=1094
export CMSDSERVERPORT=3122
export CMSDMANAGERPORT=3122

if [ "x$SERVERONREDIRECTOR" = "x1" ]; then
   export XRDSERVERPORT=1095
   export XRDMANAGERPORT=1094
   export CMSDSERVERPORT=3123
   export CMSDMANAGERPORT=3122
fi



#########################################
# The XrdAcc library which applies the
# authorization mechanism
# for ALICE it is libXrdAliceTokenAcc.so
# Put an empty string or comment to disable the authz
#########################################
#export ACCLIB=libXrdAliceTokenAcc.so


#########################################
# Sometimes (e.g. in the ALICE case) we want to give a global view
# of the content of different sites which EXPORT different storage prefixes
# e.g.
#  in the following situation we access to the same file in different places
#  with different URLS, different also in the path prefix
#  root://site1_rdr//data/site1/raw/my_fantastic_file.root   (in site1)
#  root://site2_rdr//data/site2/raw/my_fantastic_file.root   (in site2)
#
#  BUT we want to be able to make that file visible ALSO through:
#  root://site1_rdr//raw/my_fantastic_file.root    AND
#  root://site2_rdr//raw/my_fantastic_file.root
#
#  In this case:
#   site1 has to set LOCALPATHPFX=/data/site1
#   site2 has to set LOCALPATHPFX=/data/site2
#
#  Please note that doing this way we are creating "synonims" of directory spaces
#  where LOCALPATHPFX can be omitted
#########################################

#export LOCALPATHPFX=''



#########################################
# When setting up xrootd servers, a mandatory practice is to have a localroot
# directive to hide a part of the local directory prefix.
# For historical reasons, in the Alice computing model, this task
# is handled by the central DB (!), and every site exports also its local prefix.
# This led to the need for the (see above) tricky n2n translation
# If you are not sure about what to do with this localroot, please ask.
# A typical value for this is something like '/data/disk1/xrdnamespace'
#########################################

export LOCALROOT=<%= node["xrootd"]["LOCALROOT"] %>
#export LOCALROOT=/tmp

#########################################
# Probably in your data servers you are aggregating
# several mountpoints into a global namespace.
#
# e.g. if your machine can use as raw storage
#  /data/disk1/xrddata    and
#  /data/disk2/xrddata
#
# then you have to set up the oss.cache directive, through this
# variable, in this way:
#
#export $OSSCACHE='oss.cache public /data/disk1/xrddata\noss.cache public /data/disk2/xrddata'
#
#########################################

export OSSCACHE='<%= node["xrootd"]["OSSCACHE"] %>'
